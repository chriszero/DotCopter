<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GHIElectronics.NETMF.IO</name>
    </assembly>
    <members>
        <member name="T:GHIElectronics.NETMF.IO.PersistentStorage">
            <summary>
            Handles the available storage devices.
            </summary>
            <remarks>
            The user must use this class to handle the available storage devices. They can be used with the FAT file system or the USB Client Mass Storage (PC USB-connection to NETMF platform).<br/>
            Using this class makes handling Storage devices more flexible and it coordinates access between Micro Framework File System and the PC over USB Client communication to make sure there are no conflicts.<br/>
            You can use either Micro Framework File System or USB Client Mass Storage at a time, however, you can switch between the two as needed.<br/>
            <br/>
            <strong style="color:blue">Storage Devices with the File System</strong><br/>
            FAT File System lets you create and manipulate files and folders on the connected SD and USB storage devices.<br/>
            The user should refer to .Net Micro Framework documentation for details on handling files/folders.<br/>
            <strong>Note:</strong> Only FAT32/FAT(FAT16) format is supported (NOT FAT12). You can format your storage device on a PC with a FAT32 option before using it with Micro Framework. If your device is not FAT formatted, you will get an Exception when accessing files/folders.<br/>
            <br/>
            SD card, USB file systems...etc are <strong>NOT</strong> mounted automatically. They cannot be accessed until you mount them using this class.<br/>
            Here are the steps to use a Storage Device with the file system:
            <ul>
            <li>The user detects that an SD card or USB drive is inserted to the system.</li>
            <li>First, it must be inialized as a storage device using <c>myPS = new PersistentStorage(...)</c>.</li>
            <li>The user should mount it using <c>myPS.MountFileSystem()</c>.</li>
            <li>Now, the user can use any file system functionalities and handle files/folder.</li>
            <li>The user detects that the storage device SD, or USB is removed or changed.</li>
            <li>It should be unmounted using <c>myPS.UnmountFileSystem()</c>.</li>
            <li>You can specify that you need it to be removed using <c>myPS.Dispose()</c>.</li>
            <li>The same steps can be repeated as necessary.</li>
            </ul>
            When a storage device is mounted, it is available under a certain name (root directory). This can be obtained using several methods, for example, to get the root directory of the first available volume, you can use Micro Framework method: <c>VolumeInfo.GetVolumes()[0].RootDirectory</c>.<br/>
            <br/>
            The availability of the following depends on your platform.
            <table border="1">
            <tr><th>Storage Type</th><th>Constructor</th><th>Root Directory</th></tr>
            <tr><td>SD</td><td>new PersistantStorage("SD")</td><td>"SD"</td></tr>
            <tr><td>NAND</td><td>new PersistantStorage("NAND")</td><td>"NAND"</td></tr>
            <tr><td>USB</td><td>new PersistantStorage(usbDevice)</td><td>"USB", "USBx" where x is a given storage index.</td></tr>
            </table>
            If you need to access a USB memory, make sure you have an understanding of how USB Host devices are accessed and handled before using them as storage devices.<br/>
            To access a USB Mass Storage device, you need to use the USB Device object. Some USB Mass Storage devices have multiple logical units, for example, a USB card reader that can access different types or storage cards. Each card slot has a different logical unit index which can be used when creating a <c>PersistantStorage</c>.<br/>
            <br/>
            <strong style="color:red">IMPORTANT NOTE: </strong> The following can cause files or the file system to get corrupted: after mounting a storage device, the storage device MUST not be removed before all write operations are done. If you open any files, make sure to close them. Also, if you create a directory, delete files...etc, you should call <c>yourPersistentStorage.UnmountFileSystem()</c> or <c>yourVolumeInfo.FlushAll()</c>. It is best to always unmount before removing the storage device.<br/>
            <br/>
            <strong style="color:blue">Storage Devices with USB Client Access</strong><br/>
            USB Client is where your .Net Micro Framework device becomes a USB slave and on the other end you have a USB Master such as a PC.<br/>
            Using USB Client functionality, your .Net Micro Framework device will appear as a virtual Mass Storage device (similar to a USB Drive). For example, you can have an SD card and other physical USB thumb drives internally in your embedded device. These are exposed with one USB Client connection to your PC and the Operating System (Windows) on your PC will see the available embedded storage devices and manipulate them.<br/>
            Please refer to <c>GHIElectronics.NETMF.USBClient</c> if you need to use this functionality.<br/>
            <br/>
            <strong style="color:blue">Using both the File System and USB Client Access</strong><br/>
            As mentioned above you can use the file system and the USB Client as follows:<br/>
            <ul>
            <li>When the Storage Device is created, it is NOT mounted as a file system or used as a USB Clent device by default. It should be initialized through <c>myPS = new PersistentStorage(...)</c>.</li>
            <li>Let's assume the user needs it to be available as a USB Client MS device, simply tell USB Client to enable the Mass Storage access. When done, USB Client Host PC access must be disabled before proceeding with other functionalites. <c>USBC_MassStorage.EnableLun(x) ... PC Host is now accessing the storage device ... USBC_MassStorage.DisableLun(x)</c>.</li>
            <li>Now, the storage device file system can be safely mounted and used with Micro Framework. When done, it must be unmounted before proceeding with other functionalities. <c>myPS.MountFileSystem()... Handle files/folders through Micro Framework classes ... my.UnmountFileSystem()</c>.</li>
            <li>Repeat the second and third steps as necessary and their order can be exchanged as necessary.</li>
            <li>When the storage device is removed, the user can specify this at the end. <c>myPS.Dispose()</c>.</li>
            </ul>
            </remarks>
            <example>
            This example gets the available files on the SD card.
            <code>
<![CDATA[
using System;
using System.IO;
using System.Threading;

using Microsoft.SPOT;
using Microsoft.SPOT.IO;

using GHIElectronics.NETMF.IO;

namespace Test
{
    class Program
    {
        // Hold a static reference in case the GC kicks in and disposes it automatically, note that we only support one in this example!
        static PersistentStorage ps;

        public static void Main()
        {
            // Subscribe to RemovableMedia events
            RemovableMedia.Insert += RemovableMedia_Insert;
            RemovableMedia.Eject += RemovableMedia_Eject;

            // Assume SD card is inserted
            // Create a new storage device
            ps = new PersistentStorage("SD");
            ps.MountFileSystem();

            // Sleep forever
            Thread.Sleep(Timeout.Infinite);
        }

        static void RemovableMedia_Insert(object sender, MediaEventArgs e)
        {
            Debug.Print("Storage \"" + e.Volume.RootDirectory + "\" is inserted.");
            Debug.Print("Getting files and folders:");
            if (e.Volume.IsFormatted)
            {
                string[] files = Directory.GetFiles(e.Volume.RootDirectory);
                string[] folders = Directory.GetDirectories(e.Volume.RootDirectory);

                Debug.Print("Files available on " + e.Volume.RootDirectory + ":");
                for (int i = 0; i < files.Length; i++)
                    Debug.Print(files[i]);

                Debug.Print("Folders available on " + e.Volume.RootDirectory + ":");
                for (int i = 0; i < folders.Length; i++)
                    Debug.Print(folders[i]);
            }
            else
            {
                Debug.Print("Storage is not formatted. Format on PC with FAT32/FAT16 first.");
            }

            // We do not need it any more
            ps.Dispose();
        }

        static void RemovableMedia_Eject(object sender, MediaEventArgs e)
        {
            Debug.Print("Storage \"" + e.Volume.RootDirectory + "\" is ejected.");
        }
    }
}
]]>
</code>
            This example gets the available files on the USB Thumb Drive.
            <code>
<![CDATA[
using System;
using System.IO;
using System.Threading;

using Microsoft.SPOT;
using Microsoft.SPOT.IO;

using GHIElectronics.NETMF.IO;
using GHIElectronics.NETMF.USBHost;

namespace Test
{
    class Program
    {
        // Hold a static reference in case the GC kicks in and disposes it automatically, note that we only support one in this example!
        static PersistentStorage ps;

        public static void Main()
        {
            // Subscribe to RemovableMedia events
            RemovableMedia.Insert += RemovableMedia_Insert;
            RemovableMedia.Eject += RemovableMedia_Eject;

            // Subscribe to USB events
            USBHostController.DeviceConnectedEvent += DeviceConnectedEvent;

            // Sleep forever
            Thread.Sleep(Timeout.Infinite);
        }

        static void DeviceConnectedEvent(USBH_Device device)
        {
            if (device.TYPE == USBH_DeviceType.MassStorage)
            {
                Debug.Print("USB Mass Storage detected...");
                ps = new PersistentStorage(device);
                ps.MountFileSystem();
            }
        }

        static void RemovableMedia_Insert(object sender, MediaEventArgs e)
        {
            Debug.Print("Storage \"" + e.Volume.RootDirectory + "\" is inserted.");
            Debug.Print("Getting files and folders:");
            if (e.Volume.IsFormatted)
            {
                string[] files = Directory.GetFiles(e.Volume.RootDirectory);
                string[] folders = Directory.GetDirectories(e.Volume.RootDirectory);

                Debug.Print("Files available on " + e.Volume.RootDirectory + ":");
                for (int i = 0; i < files.Length; i++)
                    Debug.Print(files[i]);

                Debug.Print("Folders available on " + e.Volume.RootDirectory + ":");
                for (int i = 0; i < folders.Length; i++)
                    Debug.Print(folders[i]);
            }
            else
            {
                Debug.Print("Storage is not formatted. Format on PC with FAT32/FAT16 first.");
            }
        }

        static void RemovableMedia_Eject(object sender, MediaEventArgs e)
        {
            Debug.Print("Storage \"" + e.Volume.RootDirectory + "\" is ejected.");
        }
    }
}
]]>
</code>
            The following example shows how to use USB Client with the storage device.
            <code>
<![CDATA[
using System;
using System.IO;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.IO;
using Microsoft.SPOT.Hardware;

using GHIElectronics.NETMF.USBClient;
using GHIElectronics.NETMF.IO;
using GHIElectronics.NETMF.Hardware;

namespace USBClient_Example
{
    public class Program
    {
        public static void Main()
        {
            // Check debug interface
            if (Configuration.DebugInterface.GetCurrent() == Configuration.DebugInterface.Port.USB1)
                throw new InvalidOperationException("Current debug interface is USB. It must be changed to something else before proceeding. Refer to your platform user manual to change the debug interface.");

            // Start MS
            USBC_MassStorage ms = USBClientController.StandardDevices.StartMassStorage();

            // Assume SD card is connected
            PersistentStorage sd;
            try
            {
                sd = new PersistentStorage("SD");
            }
            catch
            {
                throw new Exception("SD card not detected");
            }
            ms.AttachLun(0, sd, " ", " ");


            // enable host access 
            ms.EnableLun(0);

            Thread.Sleep(Timeout.Infinite);
        }
    }
}
]]>
</code>
            The following example assumes that an SD card is inserted in your Micro Framework device and it will create a USB Client connection to a host PC. You will have two options: the first one will make the SD card available to NETMF and you can access the files from your platform. The second one will make the SD card available to the host PC.
            <code>
<![CDATA[
using System;
using System.IO;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.IO;
using Microsoft.SPOT.Hardware;

using GHIElectronics.NETMF.USBClient;
using GHIElectronics.NETMF.IO;
using GHIElectronics.NETMF.Hardware;

namespace USBClient_Example
{
    public class Program
    {
        static AutoResetEvent buttonPressedEvent = new AutoResetEvent(false);

        public static void Main()
        {
            // Check debug interface
            if (Configuration.DebugInterface.GetCurrent() == Configuration.DebugInterface.Port.USB1)
                throw new InvalidOperationException("Current debug interface is USB. It must be changed to something else before proceeding. Refer to your platform user manual to change the debug interface.");

            // Start MS
            USBC_MassStorage ms = USBClientController.StandardDevices.StartMassStorage();

            // Assume SD card is connected
            PersistentStorage sd;
            try
            {
                sd = new PersistentStorage("SD");
            }
            catch
            {
                throw new Exception("SD card not detected");
            }
            ms.AttachLun(0, sd, " ", " ");

            // Assume that our system has a Select button. Change as necessary.
            InterruptPort select = new InterruptPort(HardwareProvider.HwProvider.GetButtonPins(Button.VK_SELECT), true, Port.ResistorMode.PullUp, Port.InterruptMode.InterruptEdgeHigh);
            select.OnInterrupt += new NativeEventHandler(select_OnInterrupt);

            // wait to connect to PC
            while (USBClientController.GetState() != USBClientController.State.Running)
            {
                Debug.Print("Waiting to connect to PC...");
                Thread.Sleep(1000);
            }

            string RootDirectory = "\\SD";

            // enable access options
            while (true)
            {
                // Option 1
                Debug.Print("Press Select button to list the available files and folders.");
                buttonPressedEvent.WaitOne();

                sd.MountFileSystem();

                string[] files = Directory.GetFiles(RootDirectory);
                string[] folders = Directory.GetDirectories(RootDirectory);

                Debug.Print("Files available on " +RootDirectory + ":");
                for (int i = 0; i < files.Length; i++)
                    Debug.Print(files[i]);

                Debug.Print("Folders available on " + RootDirectory + ":");
                for (int i = 0; i < folders.Length; i++)
                    Debug.Print(folders[i]);

                // Option 2
                Debug.Print("Press Select button to enable PC access to SD card.");
                buttonPressedEvent.WaitOne();

                sd.UnmountFileSystem();
                ms.EnableLun(0);

                Debug.Print("Press Select button to disable PC access to SD card.");
                buttonPressedEvent.WaitOne();

                ms.DisableLun(0);
            }
        }

        static void select_OnInterrupt(uint data1, uint data2, DateTime time)
        {
            buttonPressedEvent.Set();
        }
    }
}
]]>
</code>
            </example>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.DetectSDCard">
            <summary>
            Detects if an SD card is connected.
            </summary>
            <returns><c>true</c> if an SD card is inserted.</returns>
            <remarks>
            This detects if an SD card is connected to your hardware. This is not supported by all SD cards but it works most of the time.<br/>
            Typically, the user must connect a 1 mega ohm pull down resistor to the DAT3 SD signal to get accurate detections.<br/>
            <br/>
            Only EMX and USBizi supports this feature.
            </remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.Dispose">
            <summary>
            Disposes the Persistent Storage.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.#ctor(System.String)">
            <summary>
            Creates a storage using the device ID string.
            </summary>
            <param name="DeviceID">Device ID.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.Finalize">
            <exclude/>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.#ctor(GHIElectronics.NETMF.USBHost.USBH_Device)">
            <summary>
            Creates a storage using the USB device ID and the USB interface index.
            </summary>
            <param name="usbDevice">USB Storage Device.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.#ctor(GHIElectronics.NETMF.USBHost.USBH_Device,System.Byte)">
            <summary>
            Creates a storage using the USB device ID, the USB interface index and the logical unit number.
            </summary>
            <param name="usbDevice">USB Storage Device.</param>
            <param name="massStorageLogicalUnit">Mass Storage Logical Unit index.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.MountFileSystem">
            <summary>
            Mounts the file system for the storage device.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.IO.PersistentStorage.UnmountFileSystem">
            <summary>
            Unmounts the file system for the storage device.
            </summary>
        </member>
    </members>
</doc>
